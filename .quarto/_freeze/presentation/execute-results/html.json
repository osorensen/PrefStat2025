{
  "hash": "c59166705349686d1be9bf39025374dc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bayesian Inference with the Mallows Model\"\nauthor: \"Øystein Sørensen\"\nformat: \n  revealjs:\n    theme: serif\n    echo: true\nengine: knitr\nfilters:\n  - webr\neditor: source\nbibliography: references.bib\n---\n\n\n\n## Learning goals\n\n- Bayesian Mallows model [@vitelliProbabilisticPreferenceLearning2017]\n- `BayesMallows` [@sorensenBayesMallowsPackageBayesian2020]\n- Computational algorithms [@vitelliProbabilisticPreferenceLearning2017]\n- Non-transitive preferences [@crispinoBayesianMallowsApproach2019]\n\n\n## R setup\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntheme_set(theme_bw())\ntheme_update(panel.grid = element_blank())\nlibrary(BayesMallows)\nlibrary(parallel)\nlibrary(e1071)\n```\n:::\n\n\n\n# Bayesian Mallows model\n\n## Data-generating distribution\n\nRanking $r$ generated by\n\n$$\np\\left(r | \\alpha, \\rho\\right) = \\frac{\\exp\\left\\{ - \\left(\\alpha /m\\right) d\\left(r, \\rho\\right)\\right\\}}{Z\\left(\\alpha \\right)} \n$$\n\nwith support $\\mathcal{P}_{m}$.\n\n## Data-generating distribution\n\n- Try out different $\\alpha$ and $\\rho$:\n\n```{webr-r}\nset.seed(12)\nsample_mallows(rho0 = 1:5, alpha0 = 2, n_samples = 4)\n```\n\n\n## Bayesian inference in a nutshell\n\n- Parameters of interest $\\theta$.\n\n- Prior distribution $\\pi(\\theta)$.\n\n- Likelihood $p(\\text{data} | \\theta)$.\n\n. . .\n\n- Posterior \n\n$$\np(\\theta | \\text{data}) = \\frac{\\pi(\\theta) p(\\text{data} | \\theta)}{p(\\text{data})}\n$$ \n\n## Priors for scale parameter\n\n-   @crispinoBayesianMallowsApproach2019:\n\n$$\n\\pi\\left(\\alpha\\right) \\propto \\alpha^{\\gamma-1} \\exp\\{-\\lambda \\alpha\\}, ~ \\alpha \\in [0, \\infty)\n$$\n\n-   @vitelliProbabilisticPreferenceLearning2017, special case $\\gamma=1$.\n\n## Gamma prior\n\n$\\gamma$ is the *shape* and $\\lambda$ is the *rate*.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n## Prior for modal ranking\n\n-   Uniform distribution on $\\mathcal{P}_{m}$ most natural.\n-   Example, all having prior mass 1/6:\n\n```{webr-r}\npermutations(3) # from e1071 package\n```\n\n## Posterior distributions {.smaller}\n\n::: incremental\n-   Prior: $\\pi(\\alpha, \\rho) \\propto \\alpha^{\\gamma-1} \\exp\\{-\\lambda \\alpha\\}$ with support $\\mathbb{R}_{+} \\times \\mathcal{P}_{m}$\n\n-   Likelihood $$\n    \\prod_{i=1}^{N} p(r_{i} | \\alpha, \\rho) = \\frac{\\exp\\left\\{-\\left(\\alpha/m\\right) \\sum_{i=1}^{N} d\\left(r_{i}, \\rho\\right)\\right\\}}{Z\\left(\\alpha\\right)^{N}}\n    $$\n\n-   Posterior $$\n    P(\\alpha, \\rho | \\text{data}) \\propto \\frac{\\alpha^{\\gamma-1}\\exp\\left\\{-\\left(\\alpha/m\\right) \\left[\\lambda +\\sum_{i=1}^{N} d\\left(r_{i}, \\rho\\right) \\right]\\right\\}}{Z\\left(\\alpha\\right)^{N}} \n    $$\n    with support $\\mathbb{R}_{+} \\times \\mathcal{P}_{m}$.\n:::\n\n# Computation part I\n\n## Metropolis-Hastings {.smaller}\n\nGoal: obtain samples from $p(\\theta | r_{1:N})$.\n\n::: incremental\n1.  Initialize by picking an initial state $\\theta_{0}$.\n2.  Iterate for $t=0,1,2,\\dots$\n    a.  *Generate* a random candidate $\\theta'$ from proposal distribution $g(\\theta' | \\theta_{t})$.\n    b.  Calculate acceptance probability $$\n         A\\left(\\theta', \\theta_{t}\\right) = \\text{min}\\left\\{1, \\frac{p(\\theta')}{p(\\theta_{t})}\\frac{g(\\theta_{t}|\\theta')}{g(\\theta' | \\theta_{t})}\\right\\} \n         $$\n    c.  Set $\\theta_{t+1}=\\theta'$ with probability $A(\\theta',\\theta_{t})$. Otherwise set $\\theta_{t+1} = \\theta_{t}$.\n:::\n\n. . .\n\nUnder certain assumptions the collection $\\{\\theta_{0},\\theta_{1},\\dots\\}$ will approximate a sample from $p(\\theta)$.\n\n## Metropolis-Hastings for Mallows {.smaller}\n\n::: incremental\n-   Parameters $\\alpha$ and $\\rho$ can be dealt with one at a time.\n-   Acceptance probability $A(\\rho',\\rho_{t})$ for proposal $\\rho'$: $$\n    \\text{min}\\left\\{1, \\exp\\left\\{-\\left(\\alpha_{t}/m\\right) \\sum_{i=1}^{N}\\left[d\\left(r_{i},\\rho'\\right) - d\\left(r_{i},\\rho_{t}\\right)\\right]\\right\\} \\frac{g\\left(\\rho_{t}|\\rho'\\right)}{g\\left(\\rho'|\\rho_{t}\\right)}\\right\\}\n    $$\n-   Acceptance probability $A(\\alpha',\\alpha_{t})$ for proposal $\\alpha'$: $$\n    \\text{min}\\left\\{1, \\frac{\\left(\\alpha'\\right)^{\\gamma-1} Z\\left(\\alpha_{t}\\right)^{N}}{\\alpha_{t}^{\\gamma-1} Z\\left(\\alpha'\\right)^{N}} \\exp\\left\\{-\\frac{\\alpha'-\\alpha_{t}}{m}\\left[\\lambda+\\sum_{i=1}^{N}d\\left(r_{i},\\rho_{t}\\right)\\right]\\right\\}  \\frac{g\\left(\\alpha_{t} | \\alpha'\\right)}{g\\left(\\alpha'|\\alpha_{t}\\right)}\\right\\} \n    $$\n:::\n\n## Proposal for $\\alpha$ {.smaller}\n\n::: incremental\n-   $g(\\alpha'|\\alpha_{t})$ should have support on $\\mathbb{R}_{+}$ for efficiency.\n\n-   @vitelliProbabilisticPreferenceLearning2017 and `BayesMallows` use lognormal distribution $$\n    g\\left(\\alpha' | \\alpha_{t}\\right) \\propto \\frac{\\exp\\left\\{-\\left(\\ln \\alpha' - \\ln \\alpha_{t}\\right) / (2 \\sigma^{2})\\right\\}}{\\alpha' \\sigma}\n    $$\n\n-   Ratio becomes $$\n    \\frac{g\\left(\\alpha_{t} | \\alpha'\\right)}{g\\left(\\alpha' | \\alpha_{t}\\right)} = \\frac{\\alpha'}{\\alpha_{t}}\n    $$\n\n-   Acceptance probability $$\n    \\text{min}\\left\\{1, \\frac{\\left(\\alpha'\\right)^{\\gamma} Z\\left(\\alpha_{t}\\right)^{N}}{\\alpha_{t}^{\\gamma} Z\\left(\\alpha'\\right)^{N}} \\exp\\left\\{-\\frac{\\alpha'-\\alpha_{t}}{m}\\left[\\lambda+\\sum_{i=1}^{N}d\\left(r_{i},\\rho_{t}\\right)\\right]\\right\\} \\right\\} \n    $$\n:::\n\n## Proposal for $\\rho$\n\n::: incremental\n-   Key issue: $\\rho' \\in \\mathcal{P}_{m}$.\n\n-   Leap-and-shift [@vitelliProbabilisticPreferenceLearning2017] proposal; swap proposal [@crispinoBayesianMallowsApproach2019].\n\n-   Symmetry $g(\\rho' | \\rho_{t}) = g(\\rho_{t} | \\rho')$, always for swap, for leap-and-shift with leap size 1.\n\n-   Acceptance probability under symmetry $$\n    \\text{min}\\left\\{1, \\exp\\left\\{-\\frac{\\alpha_{t}}{m} \\sum_{i=1}^{N}\\left[d\\left(r_{i},\\rho'\\right) - d\\left(r_{i},\\rho_{t}\\right)\\right]\\right\\}\\right\\}\n    $$\n:::\n\n## Leap-and-shift proposal\n\n![](figures/leap_and_shift.png)\n\n\n# Potato data\n\n---\n\n![](figures/potato.png){fig-align=\"center\"}\n\n## Potato data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npotato_visual\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    P1 P2 P3 P4 P5 P6 P7 P8 P9 P10 P11 P12 P13 P14 P15 P16 P17 P18 P19 P20\nA1  10 18 19 15  6 16  4 20  3   5  12   1   2   9  17   8   7  14  13  11\nA2  10 18 19 17 11 15  6 20  4   3  13   1   2   7  16   8   5  12   9  14\nA3  12 15 18 16 13 11  7 20  6   3   8   2   1   4  19   5   9  14  10  17\nA4   9 17 19 16 10 15  5 20  3   4   8   1   2   7  18  11   6  13  14  12\nA5  12 17 19 15  7 16  2 20  3   9  13   1   4   5  18  11   6   8  10  14\nA6  10 15 19 16  8 18  6 20  3   7  11   1   2   4  17   9   5  13  12  14\nA7   9 16 19 17 10 15  5 20  3   8  11   1   2   6  18   7   4  14  12  13\nA8  14 18 20 19 11 15  6 17  4   3  10   1   2   7  16   8   5  12   9  13\nA9   8 16 18 19 12 13  6 20  5   3   7   1   4   2  17  10   9  15  14  11\nA10  7 17 19 18  9 15  5 20  3  10  11   1   2   6  16   8   4  13  12  14\nA11 12 16 19 15 13 18  7 20  3   5  11   1   2   6  17  10   4  14   8   9\nA12 14 15 19 16 12 18  8 20  3   4   9   1   2   7  17   6   5  13  10  11\n```\n\n\n:::\n:::\n\n\n\n\n## Convergence diagnostics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncl <- makeCluster(4)\nmod <- compute_mallows(\n  data = setup_rank_data(rankings = potato_visual), \n  compute_options = set_compute_options(nmc = 300), \n  cl = cl)\nstopCluster(cl)\n```\n:::\n\n\n\n## Convergence diagnostics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassess_convergence(mod) + scale_color_discrete(guide = \"none\")\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n\n\n## Convergence diagnostics\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\ncl <- makeCluster(4)\nmod <- compute_mallows(\n  data = setup_rank_data(rankings = potato_visual), \n  compute_options = set_compute_options(nmc = 5000), \n  cl = cl)\nstopCluster(cl)\n```\n:::\n\n\n\n## Convergence diagnostics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassess_convergence(mod) + scale_color_discrete(guide = \"none\")\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n\n## Convergence diagnostics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassess_convergence(mod, parameter = \"rho\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nItems not provided by user. Picking 5 at random.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n\n# Studying the posteriors\n\n## Posteriors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nburnin(mod) <- 2500\nplot(mod)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n\n## Posteriors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mod, parameter = \"rho\", items = 1:4)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n\n## CP consensus\n\nCumulative probability consensus:\n\n- First select the item which has the maximum a posteriori marginal probability of being ranked 1st\n- Then select the item which has the maximum a posteriori marginal posterior probability of being ranked 1st or 2nd among the remaining ones.\n- etc.\n\n## CP consensus\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_consensus(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     cluster ranking item cumprob\n1  Cluster 1       1  P12  1.0000\n2  Cluster 1       2  P13  1.0000\n3  Cluster 1       3   P9  0.9930\n4  Cluster 1       4  P10  0.9504\n5  Cluster 1       5  P17  0.9232\n6  Cluster 1       6   P7  0.8900\n7  Cluster 1       7  P14  1.0000\n8  Cluster 1       8  P16  0.9931\n9  Cluster 1       9   P1  0.4646\n10 Cluster 1      10   P5  0.6970\n11 Cluster 1      11  P11  0.9620\n12 Cluster 1      12  P19  0.9906\n13 Cluster 1      13  P20  0.5459\n14 Cluster 1      14  P18  1.0000\n15 Cluster 1      15   P6  0.9721\n16 Cluster 1      16   P4  0.7467\n17 Cluster 1      17   P2  0.7908\n18 Cluster 1      18  P15  1.0000\n19 Cluster 1      19   P3  1.0000\n20 Cluster 1      20   P8  1.0000\n```\n\n\n:::\n:::\n\n\n\n# Partial rankings and preferences\n\n## Top-3 rankings\n\n-   Top-3 rankings: $$\n    r_{i} = (\\cdot , 1, \\cdot, \\cdot, 3, 2)\n    $$\n\n-   Possible complete rankings: $$\n    (4, 1, 5, 6, 3, 2), (4, 1, 6, 5, 3, 2), \\\\\n    (5, 1, 4, 6, 3, 2), (5, 1, 6, 4, 3, 2), \\\\\n    (6, 1, 4, 5, 3, 2), (6, 1, 5, 4, 3, 2)\n    $$\n\n## Pairwise preferences\n\n-   Observation $(3 \\prec 2), (2 \\prec 1)$\n\n. . .\n\n```{webr-r}\nprefs <- data.frame(\n  assessor = 1, bottom_item = c(2, 3), top_item = c(1, 2))\nget_transitive_closure(\n  setup_rank_data(preferences = prefs, n_items = 4))\n```\n\n. . .\n\n-   Possible complete rankings (with 4 items) $$\n    (4, 1, 2, 3), (1, 4, 2, 3), (1, 2, 4, 3), (1, 2, 3, 4)\n    $$\n\n## Posteriors {.smaller}\n\n:::{.incremental}\n-   Partial ranking or pairwise preferences in $y_{i}$ generate a constraint set $\\mathcal{S}_{i}$.\n\n-   Marginal likelihood $$\n    \\prod_{i=1}^{N} p\\left(y_{i} | \\alpha, \\rho\\right) = \\frac{1}{Z\\left(\\alpha\\right)} \\prod_{i=1}^{N} \\sum_{r_{i} \\in \\mathcal{S}_{i}} \\exp\\left\\{-\\left(\\alpha /m\\right)  d\\left(r_{i}, \\rho\\right)\\right\\}\n    $$\n\n-   Marginal posterior $$\n    p\\left(\\alpha, \\rho | \\text{data}\\right) =  \\frac{\\alpha^{\\gamma -1 } \\exp\\left\\{-\\lambda \\alpha\\right\\}}{Z\\left(\\alpha\\right)} \\prod_{i=1}^{N} \\sum_{r_{i} \\in \\mathcal{S}_{i}} \\exp\\left\\{-\\left(\\alpha /m\\right) d\\left(r_{i}, \\rho\\right)\\right\\}\n    $$\n\n-   Complete data: special case with $\\mathcal{S}_{i} = \\{y_{i}\\}$.\n:::\n\n## Metropolis-Hastings\n\n:::{.incremental}\n-   Need to add sampling of $r_{i}$.\n-   Cost of $M$ iteration now becomes $\\mathcal{O}(NM)$, up from $\\mathcal{O}(M)$ with complete data.\n-   Proposing $r_{i}$ on $\\mathcal{S}_{i}$ (symmetrically), accepting with probability $$\n    \\exp\\left\\{-\\frac{\\alpha_{t}}{m} \\sum_{i=1}^{N}\\left[d\\left(r_{i}', \\rho_{t}\\right) - d\\left(r_{i,t},\\rho_{t}\\right)\\right]\\right\\}\n    $$\n:::\n\n## Beach data\n\n![](figures/beach_data.png){fig-align=\"center\"}\n\n## Beach data\n\n```{webr-r}\nhead(beach_preferences)\n```\n\n## Preparing for analysis\n\n- Compare `dim`:\n\n```{webr-r}\nbeach_data <- setup_rank_data(preferences = beach_preferences)\nget_transitive_closure(beach_data)\n```\n\n## Diagnostics\n\n```{webr-r}\nmod <- compute_mallows(\n  data = beach_data,\n  compute_options = set_compute_options(nmc = 3, save_aug = TRUE)\n)\nassess_convergence(mod)\nassess_convergence(mod, parameter = \"rho\")\nassess_convergence(mod, parameter = \"Rtilde\")\n```\n\n\n## Posteriors\n\n```{webr-r}\nmod <- compute_mallows(\n  data = setup_rank_data(preferences = beach_preferences),\n  compute_options = set_compute_options(nmc = 3, save_aug = TRUE)\n)\nburnin(mod) <- 2\ncompute_consensus(mod)\nplot_top_k(mod, k = 3)\n```\n\n\n# Mixtures\n\n## Mixture modeling\n\n- Heterogeneous population:\n\n$$\\rho_{c}, \\alpha_{c}, ~c=1,\\dots,C$$\n\n- Cluster probabilities\n\n$$\\tau_{c}, ~ c=1,\\dots,C$$\n\n## Mixtures of Mallows models {.smaller}\n\nComplete ranking, C-component mixture:\n\n$$\np\\left(r | \\alpha_{1:C}, \\rho_{1:C}, \\tau_{1:C}\\right) = \\sum_{c=1}^{C}\\frac{\\tau_{c} \\exp\\left\\{ - \\left(\\alpha_{c}/m\\right) d\\left(r, \\rho_{c}\\right)\\right\\}}{Z\\left(\\alpha_{c} \\right)} \n$$\n\nwith $\\sum_{c=1}^{C}\\tau_{c}=1$.\n\n. . .\n\n-   Symmetric Dirichlet prior: $\\pi(\\tau_{1},\\dots,\\tau_{C}) \\propto \\prod_{c=1}^{C} \\tau_{c}^{\\psi-1}$.\n-   Cluster labels $z_{i} \\in \\{1,\\dots,C\\}$ multinomial with probabilities $\\tau_{c}$.\n\n## Markov chain Monte Carlo {.smaller}\n\n- Metropolis-within-Gibbs algorithm:\n\n:::{.incremental}\n1. Sample $\\tau_{1}, \\dots, \\tau_{C} \\sim \\text{Dirichlet}(\\psi+n_{1},\\dots,\\psi+n_{C})$.\n2. Propose and accept/reject $\\alpha_{c}$, $\\rho_{c}$ for $c=1,\\dots,C$ with Metropolis-Hastings targeting\n$$\nP\\left(\\alpha_{1:C}, \\rho_{1:C} | z_{1:N}, \\text{data}\\right) \\propto \\\\\n\\left[\\prod_{c=1}^{C} \\alpha_{c}^{\\gamma_{c}-1} \\exp\\left\\{-\\lambda \\alpha_{c}\\right\\}  \\right] \\left[\\prod_{i=1}^{N} \\frac{\\exp\\left\\{-\\left(\\alpha_{z_{i}} /m\\right) d\\left(r_{i},\\rho_{z_{i}}\\right)\\right\\}}{Z\\left(\\alpha_{z_{i}}\\right)} \\right].\n$$\n3. Sample cluster labels $z_{i}$ multinomially with probabilities\n$$\np_{ic} = \\frac{\\tau_{c} \\exp\\left\\{-\\left(\\alpha_{c}/m\\right) d\\left(r_{i}, \\rho_{c}\\right)\\right\\}}{Z\\left(\\alpha_{c}\\right)}.\n$$\n:::\n\n## Sushi data\n\n```{webr-r}\nhead(sushi_rankings)\n```\n\n\n## Mixtures in BayesMallows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncl <- makeCluster(7)\nmod <- compute_mallows_mixtures(\n  n_clusters = 1:7,\n  data = setup_rank_data(rankings = sushi_rankings),\n  compute_options = set_compute_options(include_wcd = TRUE),\n  cl = cl\n)\nstopCluster(cl)\n```\n:::\n\n\n\n## Mixtures in BayesMallows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassess_convergence(mod)\n```\n:::\n\n\n\n![](figures/cluster_convergence.png)\n\n## How many clusters?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nburnin(mod) <- 300\nplot_elbow(mod)\n```\n:::\n\n\n\n![](figures/cluster_elbow.png)\n\n## Five-cluster model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- compute_mallows(\n  data = setup_rank_data(rankings = sushi_rankings),\n  model_options = set_model_options(n_clusters = 5)\n)\n```\n:::\n\n\n\n## Five-cluster model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassess_convergence(mod)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nburnin(mod) <- 500\n```\n:::\n\n\n\n\n## Posteriors for cluster weights\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mod, parameter = \"cluster_probs\")\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n\n## Where do I belong?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mod, parameter = \"cluster_assignment\")\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n\n## Cluster consensus {.smaller}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_consensus(mod) %>% \n  as_tibble() %>% \n  select(-cumprob) %>% \n  pivot_wider(names_from = cluster, values_from = item)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 6\n   ranking `Cluster 1`   `Cluster 2`   `Cluster 3`   `Cluster 4`   `Cluster 5`  \n     <dbl> <chr>         <chr>         <chr>         <chr>         <chr>        \n 1       1 fatty tuna    fatty tuna    shrimp        fatty tuna    fatty tuna   \n 2       2 sea urchin    tuna          sea eel       sea eel       sea urchin   \n 3       3 salmon roe    shrimp        squid         tuna          salmon roe   \n 4       4 tuna          tuna roll     egg           salmon roe    sea eel      \n 5       5 shrimp        squid         fatty tuna    tuna roll     tuna         \n 6       6 squid         egg           tuna          shrimp        shrimp       \n 7       7 tuna roll     sea eel       tuna roll     squid         tuna roll    \n 8       8 sea eel       cucumber roll cucumber roll egg           squid        \n 9       9 egg           salmon roe    salmon roe    cucumber roll egg          \n10      10 cucumber roll sea urchin    sea urchin    sea urchin    cucumber roll\n```\n\n\n:::\n:::\n\n\n\n\n# Non-transitive pairwise preferences\n\n## Inconsistencies\n\n@crispinoBayesianMallowsApproach2019 considers the case where pairwise preferences are inconsistent, e.g.,\n\n$$\n1 \\prec 2, 2 \\prec 3, 3 \\prec 1\n$$\n\n\n```{webr-r}\nprefs <- data.frame(\n  assessor = 1, bottom_item = c(1, 2, 3), top_item = c(2, 3, 1)\n)\nprepared <- setup_rank_data(preferences = prefs)\nget_transitive_closure(prepared)\n```\n\n## Inconsistent rankings\n\n@crispinoBayesianMallowsApproach2019:\n\n:::{.incremental}\n\n- Assume a truth $r_{i}$ exists for each assessor,\n$$\np(r_{i}) = \\frac{\\exp\\left\\{-\\alpha d\\left(r_{i}, \\rho\\right)\\right\\}}{Z\\left(\\alpha\\right)}.\n$$\n- Inconsistencies are due to errors made by the assessor,\n$$\np(A_{r} \\prec A_{s} \\in y_{i} | A_{s} \\prec A_{r} \\in r_{i}) \\propto \\theta.\n$$\n\n:::\n\n## Sounds data\n\n@barrettImpact3DSound2018:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(sounds, 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   assessor bottom_item top_item\n1         1           5        1\n2         1          10       12\n3         1           4       11\n4         1           9        2\n5         1           3        4\n6         1          10        5\n7         1           3        2\n8         1           5        4\n9         1          12        6\n10        1          10        1\n11        1           9       11\n12        1          11        7\n13        1          10        7\n14        1           3        1\n15        1           9        8\n16        1          10       11\n17        1           6        7\n18        1           8        2\n19        1          10        2\n20        1           5        2\n```\n\n\n:::\n:::\n\n\n\n\n## Inconsistent rankings in BayesMallows\n\n```{webr-r}\ndat <- setup_rank_data(preferences = sounds)\nget_transitive_closure(dat)\n```\n\n## Inconsistent rankings in BayesMallows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- compute_mallows(\n  data = setup_rank_data(preferences = sounds),\n  compute_options = set_compute_options(nmc = 5000),\n  model_options = set_model_options(error_model = \"bernoulli\")\n)\n```\n:::\n\n\n\n## Convergence\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassess_convergence(mod)\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n\n## Posteriors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nburnin(mod) <- 2000\nplot(mod, parameter = \"theta\")\n```\n\n::: {.cell-output-display}\n![](presentation_files/figure-revealjs/unnamed-chunk-24-1.png){width=960}\n:::\n:::\n\n\n\n\n# The end\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}